1.Análise Técnica do Código Terraform:

	. Provider AWS: configuração de região.

provider "aws" {
  region = "us-east-1"
}

	. Variáveis: projeto e candidato.

variable "projeto" {
  description = "Nome do projeto"
  type        = string
  default     = "VExpenses"
}

variable "candidato" {
  description = "Nome do candidato"
  type        = string
  default     = "SeuNome"
}

	. Chave SSH: o Terraform cria uma chave privada RSA (tls_private_key) e um par de chaves SSH na AWS 	(aws_key_pair), que será usada para acessar a instância EC2.

resource "tls_private_key" "ec2_key" {
  algorithm = "RSA"
  rsa_bits  = 2048
}

resource "aws_key_pair" "ec2_key_pair" {
  key_name   = "${var.projeto}-${var.candidato}-key"
  public_key = tls_private_key.ec2_key.public_key_openssh
}

	. VPC: criação de uma VPC com o CIDR 10.0.0.0/16. Essa VPC vai permitir a segmentação e o controle do tráfego de rede.

resource "aws_vpc" "main_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "${var.projeto}-${var.candidato}-vpc"
  }
}

	. Subnet: Uma subnet pública é criada dentro da VPC, com o CIDR 10.0.1.0/24 e associada à zona de disponibilidade us-east-1a. A 	subnet permite a alocação de instâncias EC2 que estarão acessíveis pela internet.

resource "aws_subnet" "main_subnet" {
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "${var.projeto}-${var.candidato}-subnet"
  }
}

	. Internet Gateway (IGW): o IGW é configurado para permitir o tráfego de entrada e saída da VPC para a internet, permitindo que 	as instâncias EC2 dentro da subnet possam se comunicar com o exterior.

resource "aws_internet_gateway" "main_igw" {
  vpc_id = aws_vpc.main_vpc.id
  tags = {
    Name = "${var.projeto}-${var.candidato}-igw"
  }
}

	. Route Table e Associações: a criação de uma tabela de rotas que define o tráfego de saída para qualquer destino (0.0.0.0/0) 	via o IGW. Esta tabela é associada à subnet para garantir que o tráfego possa circular entre a instância EC2 e a internet.

resource "aws_route_table" "main_route_table" {
  vpc_id = aws_vpc.main_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main_igw.id
  }
  tags = {
    Name = "${var.projeto}-${var.candidato}-route_table"
  }
}

	. Security Group: o Security Group permite o acesso SSH na porta 22 de qualquer IP (o que pode ser considerado um risco de 	segurança) e permite todo o tráfego de saída.

resource "aws_security_group" "main_sg" {
  name        = "${var.projeto}-${var.candidato}-sg"
  description = "Permitir SSH de qualquer lugar e todo o tráfego de saída"
  vpc_id      = aws_vpc.main_vpc.id
  ingress {
    description      = "Allow SSH from anywhere"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  egress {
    description      = "Allow all outbound traffic"
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  tags = {
    Name = "${var.projeto}-${var.candidato}-sg"
  }
}

	. Instância EC2: uma instância EC2 do tipo t2.micro é criada utilizando a imagem mais recente do Debian 12. A instância é 	configurada para ter um volume de disco de 20 GB, com o acesso público habilitado e associada à chave SSH criada.

resource "aws_instance" "debian_ec2" {
  ami             = data.aws_ami.debian12.id
  instance_type   = "t2.micro"
  subnet_id       = aws_subnet.main_subnet.id
  key_name        = aws_key_pair.ec2_key_pair.key_name
  security_groups = [aws_security_group.main_sg.name]
  associate_public_ip_address = true
  root_block_device {
    volume_size           = 20
    volume_type           = "gp2"
    delete_on_termination = true
  }
  user_data = <<-EOF
              #!/bin/bash
              apt-get update -y
              apt-get upgrade -y
              EOF
  tags = {
    Name = "${var.projeto}-${var.candidato}-ec2"
  }
}

OBSERVAÇÕES: 
. O código cria uma infraestrutura simples na AWS, com uma instância EC2 na VPC, e com acesso SSH.
. A segurança da instância EC2 pode ser aprimorada, já que no código atual o permite SSH de qualquer lugar.

2. Modificação e Melhoria do Código Terraform: 

	. Restringir o Acesso SSH: uma melhoria importante seria restringir o acesso SSH (porta 22) a IPs específicos, como o seu IP 	público, ao invés de permitir de qualquer lugar.
	A segurança de uma instância EC2 pode ser comprometida quando o acesso SSH é permitido de qualquer endereço IP. Essa 	configuração abre a porta 22 para ataques de força bruta e outras ameaças. Ao restringir o acesso SSH ao seu IP público	minimiza significativamente o risco de acesso não autorizado, garantindo que apenas usuários conhecidos possam acessar a 	instância.

ingress {
  description      = "Allow SSH from specific IP"
  from_port        = 22
  to_port          = 22
  protocol         = "tcp"
  cidr_blocks      = ["<SEU_IP_PUBLICO>/32"]
}

	. Automação da Instalação do Nginx: automatização da instalação do Nginx com o user_data para a EC2.
	A automação da instalação do Nginx elimina a necessidade de intervenção manual após o provisionamento da instância EC2, 	melhorando a eficiência e a consistência. Isso é útil em ambientes de produção e quando se trabalha com múltiplas 	instâncias, pois permite que o processo seja repetido de forma automatizada.

user_data = <<-EOF
            #!/bin/bash
            apt-get update -y
            apt-get upgrade -y
            apt-get install -y nginx
            systemctl start nginx
            systemctl enable nginx
            EOF

MELHORIA EXTRA:

	. Adicionar Regras de Segurança para Nginx:  liberando a porta 80 para tráfego HTTP.
	O Nginx foi instalado para fornecer serviços web (HTTP), e para que os usuários possam acessar a página inicial do servidor, é 	necessário liberar a porta 80. Sem essa regra, o tráfego HTTP seria bloqueado pelo Security Group, tornando o servidor 	inacessível via navegador. Liberar a porta 80 para qualquer IP é comum em servidores web, já que o objetivo é permitir acesso 	público.

ingress {
  description      = "Allow HTTP from anywhere"
  from_port        = 80
  to_port          = 80
  protocol         = "tcp"
  cidr_blocks      = ["0.0.0.0/0"]
}

ARQUIVO MODIFICADO:

provider "aws" {
  region = "us-east-1"
}

variable "projeto" {
  description = "Nome do projeto"
  type        = string
  default     = "VExpenses"
}

variable "candidato" {
  description = "Nome do candidato"
  type        = string
  default     = "SeuNome"
}

resource "tls_private_key" "ec2_key" {
  algorithm = "RSA"
  rsa_bits  = 2048
}

resource "aws_key_pair" "ec2_key_pair" {
  key_name   = "${var.projeto}-${var.candidato}-key"
  public_key = tls_private_key.ec2_key.public_key_openssh
}

resource "aws_vpc" "main_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "${var.projeto}-${var.candidato}-vpc"
  }
}

resource "aws_subnet" "main_subnet" {
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "${var.projeto}-${var.candidato}-subnet"
  }
}

resource "aws_internet_gateway" "main_igw" {
  vpc_id = aws_vpc.main_vpc.id

  tags = {
    Name = "${var.projeto}-${var.candidato}-igw"
  }
}

resource "aws_route_table" "main_route_table" {
  vpc_id = aws_vpc.main_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main_igw.id
  }

  tags = {
    Name = "${var.projeto}-${var.candidato}-route_table"
  }
}

resource "aws_route_table_association" "main_association" {
  subnet_id      = aws_subnet.main_subnet.id
  route_table_id = aws_route_table.main_route_table.id

  tags = {
    Name = "${var.projeto}-${var.candidato}-route_table_association"
  }
}

resource "aws_security_group" "main_sg" {
  name        = "${var.projeto}-${var.candidato}-sg"
  description = "Permitir SSH e HTTP"
  vpc_id      = aws_vpc.main_vpc.id

  # Regras de entrada
  ingress {
    description      = "Allow SSH from specific IP"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["<seu-ip-publico>/32"]
  }

  ingress {
    description      = "Allow HTTP from anywhere"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  # Regras de saída
  egress {
    description      = "Allow all outbound traffic"
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.projeto}-${var.candidato}-sg"
  }
}

data "aws_ami" "debian12" {
  most_recent = true

  filter {
    name   = "name"
    values = ["debian-12-amd64-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["679593333241"]
}

resource "aws_instance" "debian_ec2" {
  ami             = data.aws_ami.debian12.id
  instance_type   = "t2.micro"
  subnet_id       = aws_subnet.main_subnet.id
  key_name        = aws_key_pair.ec2_key_pair.key_name
  security_groups = [aws_security_group.main_sg.name]

  associate_public_ip_address = true

  root_block_device {
    volume_size           = 20
    volume_type           = "gp2"
    delete_on_termination = true
  }

  user_data = <<-EOF
              #!/bin/bash
              apt-get update -y
              apt-get upgrade -y
              apt-get install -y nginx
              systemctl start nginx
              systemctl enable nginx
              EOF

  tags = {
    Name = "${var.projeto}-${var.candidato}-ec2"
  }
}

output "private_key" {
  description = "Chave privada para acessar a instância EC2"
  value       = tls_private_key.ec2_key.private_key_pem
  sensitive   = true
}

output "ec2_public_ip" {
  description = "Endereço IP público da instância EC2"
  value       = aws_instance.debian_ec2.public_ip
}



